{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import * as fs from \"fs/promises\";\r\nimport * as path from \"path\";\r\nimport inquirer from \"inquirer\";\r\n\r\nconst args = process.argv.slice(2);\r\nconst configFileName = \".mdlite-config.json\";\r\nconst configFilePath = path.join(process.cwd(), configFileName);\r\n\r\ninterface ParsedArgs {\r\n  dir?: string;\r\n  fileName?: string;\r\n  changeDir: boolean;\r\n}\r\n\r\nfunction parseArgs(args: string[]): ParsedArgs {\r\n  let dir: string | undefined = undefined;\r\n  let fileName: string | undefined = undefined;\r\n  let changeDir = false;\r\n\r\n  for (let i = 0; i < args.length; i++) {\r\n    const arg = args[i];\r\n    if (arg === \"--dir\" && i + 1 < args.length) {\r\n      dir = args[i + 1];\r\n      i++;\r\n    } else if (arg === \"--change\") {\r\n      changeDir = true;\r\n    } else if (!arg.startsWith(\"--\") && !fileName) {\r\n      fileName = arg;\r\n    }\r\n  }\r\n\r\n  return { dir, fileName, changeDir };\r\n}\r\n\r\nasync function readConfig(): Promise<{ lastDir?: string }> {\r\n  try {\r\n    const data = await fs.readFile(configFilePath, \"utf-8\");\r\n    return JSON.parse(data);\r\n  } catch {\r\n    return {};\r\n  }\r\n}\r\n\r\nasync function writeConfig(config: { lastDir?: string }): Promise<void> {\r\n  const data = JSON.stringify(config, null, 2);\r\n  await fs.writeFile(configFilePath, data, \"utf-8\");\r\n}\r\n\r\nasync function getLastDir(): Promise<string | undefined> {\r\n  const config = await readConfig();\r\n  return config.lastDir;\r\n}\r\n\r\nasync function setLastDir(dir: string): Promise<void> {\r\n  const config = await readConfig();\r\n  config.lastDir = dir;\r\n  await writeConfig(config);\r\n}\r\n\r\nasync function chooseDirectory(baseDir: string): Promise<string> {\r\n  const items = await fs.readdir(baseDir, { withFileTypes: true });\r\n  const folders = items.filter((item) => item.isDirectory()).map((item) => item.name);\r\n\r\n  const choices = [...folders];\r\n  if (baseDir !== path.parse(baseDir).root) {\r\n    choices.push(\"[\uC0C1\uC704 \uD3F4\uB354\uB85C \uB3CC\uC544\uAC00\uAE30]\");\r\n  }\r\n  choices.push(\"[\uD604\uC7AC \uD3F4\uB354 \uC120\uD0DD]\");\r\n\r\n  const { selectedFolder } = await inquirer.prompt([\r\n    {\r\n      type: \"list\",\r\n      name: \"selectedFolder\",\r\n      message: `\uD3F4\uB354\uB97C \uC120\uD0DD\uD558\uC138\uC694 (\uD604\uC7AC: ${path.basename(baseDir)}):`,\r\n      choices,\r\n    },\r\n  ]);\r\n\r\n  if (selectedFolder === \"[\uD604\uC7AC \uD3F4\uB354 \uC120\uD0DD]\") {\r\n    return baseDir;\r\n  }\r\n\r\n  if (selectedFolder === \"[\uC0C1\uC704 \uD3F4\uB354\uB85C \uB3CC\uC544\uAC00\uAE30]\") {\r\n    return chooseDirectory(path.dirname(baseDir));\r\n  }\r\n\r\n  return chooseDirectory(path.join(baseDir, selectedFolder));\r\n}\r\n\r\nasync function getMarkdownFiles(dir: string): Promise<string[]> {\r\n  const items = await fs.readdir(dir);\r\n  const markdowns: string[] = [];\r\n\r\n  await Promise.all(\r\n    items.map(async (item) => {\r\n      const fullPath = path.join(dir, item);\r\n      const stat = await fs.stat(fullPath);\r\n      if (stat.isFile() && path.extname(item) === \".md\") {\r\n        markdowns.push(item);\r\n      }\r\n    })\r\n  );\r\n\r\n  return markdowns;\r\n}\r\n\r\nasync function readFileAndPrint(dir: string, fileName: string) {\r\n  const filePath = path.join(dir, fileName);\r\n  const content = await fs.readFile(filePath, \"utf-8\");\r\n  console.log(`\\n==== \uD83D\uDCC4 ${fileName} ====\\n`);\r\n  console.log(content);\r\n}\r\n\r\nasync function main() {\r\n  const { dir: dirArg, fileName: fileArg, changeDir } = parseArgs(args);\r\n  const lastDir = await getLastDir();\r\n\r\n  const startDir = changeDir ? process.cwd() : dirArg || lastDir || process.cwd();\r\n  const selectedDir = await chooseDirectory(startDir);\r\n\r\n  await setLastDir(selectedDir);\r\n\r\n  const markdownFiles = await getMarkdownFiles(selectedDir);\r\n  if (markdownFiles.length === 0) {\r\n    console.log(`\uD83D\uDCC2 '${selectedDir}' \uD3F4\uB354 \uB0B4\uC758 Markdown \uD30C\uC77C\uC774 \uC5C6\uC2B5\uB2C8\uB2E4.`);\r\n    return;\r\n  }\r\n\r\n  if (fileArg) {\r\n    let inputName = fileArg;\r\n    if (path.extname(inputName) !== \".md\") {\r\n      inputName += \".md\";\r\n    }\r\n\r\n    const matched = markdownFiles.find((f) => f.toLowerCase() === inputName.toLowerCase());\r\n\r\n    if (!matched) {\r\n      console.log(`\u274C '${inputName}' \uD30C\uC77C\uC774 \uC874\uC7AC\uD558\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.`);\r\n      return;\r\n    }\r\n\r\n    await readFileAndPrint(selectedDir, matched);\r\n    return;\r\n  }\r\n\r\n  const { selectedFile } = await inquirer.prompt([\r\n    {\r\n      type: \"list\",\r\n      name: \"selectedFile\",\r\n      message: \"\uC77D\uC744 Markdown \uD30C\uC77C\uC744 \uC120\uD0DD\uD558\uC138\uC694:\",\r\n      choices: markdownFiles,\r\n    },\r\n  ]);\r\n\r\n  await readFileAndPrint(selectedDir, selectedFile);\r\n}\r\n\r\nmain();\r\n"],
  "mappings": "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",
  "names": ["args", "stat"]
}
